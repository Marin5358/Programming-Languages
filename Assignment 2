import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Test {
    private String s;

    public Test() {
        this.s = "Programming languages";
    }

    public void method1(String name) {
        System.out.println("Printing the result of method1: " + name);
    }

    public void method2(int n) {
        System.out.println(n);
    }

    private void method3() {
        System.out.println("Private method is invoked");
    }

    public static void main(String[] args) throws Exception {
        Test test = new Test();
        Class<?> cls = test.getClass();

        Method methodCall1 = cls.getDeclaredMethod("method1", String.class);
        methodCall1.invoke(test, "parameterName");

        Field field = cls.getDeclaredField("s");
        field.setAccessible(true);
        System.out.println(field.get(test));

        System.out.println("Print the changed value of s:");
        field.set(test, "JAVA");
        methodCall1.invoke(test, "parameterName");

        Method method3 = cls.getDeclaredMethod("method3");
        method3.setAccessible(true);
        method3.invoke(test);
    }
}
